name: test-project CI/CD Pipeline to using Docker Hub

# 워크플로우가 실행될 조건 (트리거)
on:
  push:
    branches: [ "main" ] # main 브랜치에 push 될 때 실행

# 실행될 작업(Job)들 정의
jobs:
  build-and-push:
    # 작업이 실행될 가상 환경
    runs-on: ubuntu-latest

    # 작업의 단계(Step)들
    steps:
      # 1. 레포지토리 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # 2단계에서 GitHub Secrets에 저장한 정보 사용
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Docker 이미지 빌드 및 Docker Hub에 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # 이미지 태그 설정: DockerHubID/레포지토리이름:latest
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest

 # ===== 여기부터 배포 작업 추가 =====
  deploy:
    # build-and-push 작업이 성공해야만 실행됨
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Docker Hub에서 최신 이미지 pull
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest

            # 기존에 실행 중인 컨테이너가 있다면 중지 및 제거
            # || true 를 붙여서 컨테이너가 없는 첫 배포 시에 오류가 나지 않도록 함
            sudo docker stop test-project || true
            sudo docker rm test-project || true

            # 새로운 이미지로 컨테이너 실행
            # -d: 백그라운드 실행
            # --name: 컨테이너에 이름 부여 (나중에 중지/제거 시 사용)
            # -p: 포트 연결 (호스트:컨테이너)
            sudo docker run -d --name test-project ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest